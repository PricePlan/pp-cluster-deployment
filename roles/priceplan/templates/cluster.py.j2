"""
PricePlan DOCKER PRODUCTION settings from OS environment.

"""
from .docker import *  # pylint:disable=wildcard-import,unused-wildcard-import


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': '{{ pp_postgres_db }}',
        'USER': '{{ pp_postgres_user }}',
        'PASSWORD': '{{ pp_postgres_password }}',
        'HOST': '127.0.0.1',
        'PORT': {{ haproxy_frontend_pg_port }},
        'CONN_MAX_AGE': 30,
        'OPTIONS': {
            'client_encoding': 'UTF8',
        },
        'ATOMIC_REQUESTS': True,
        # 'DISABLE_SERVER_SIDE_CURSORS': True, # For PgBouncer
    }
}

CACHES = {
    'default': {
        'BACKEND': 'redis_cache.RedisCache',
        'LOCATION': [
            '127.0.0.1:{{ haproxy_frontend_redis_port }}'
        ],
        'OPTIONS': {
            'DB': REDIS_DBS['django_cache'],
            'PARSER_CLASS': 'redis.connection.HiredisParser',
            'CONNECTION_POOL_CLASS': 'redis.BlockingConnectionPool',
            'CONNECTION_POOL_CLASS_KWARGS': {
                'max_connections': 50,
                'timeout': 20,
            },
            'MAX_CONNECTIONS': 1000,
            'PICKLE_VERSION':-1,
        }
    }
}

CELERY_BROKER_URL = [
    {% for host, ip in cluster.items() -%}
    'pyamqp://{{ amqp_user }}:{{ amqp_password }}@{{ ip }}:{{ rabbitmq_port }}/{{ rabbitmq_default_vhost }}',
    {% endfor -%}
]

CELERY_RESULT_BACKEND = 'redis://{redis_host}:{redis_port}/{db}'.format(
    redis_host='127.0.0.1', redis_port={{ haproxy_frontend_redis_port }},
    db=REDIS_DBS['celery_result'])

ELASTICSEARCH_CONNECTIONS = [
    'http://127.0.0.1:9200',
    {% for host, ip in cluster.items() -%}
    {% if host != ansible_hostname -%}
    'http://{{ ip }}:9200',
    {% endif -%}
    {% endfor -%}
]

{% if ldap_enabled %}
LOGGING['loggers']['django_auth_ldap'] = {
    'level': 'DEBUG',
    'handlers': ['logstash_sys', 'console'],
    'propagate': False,
}

import ldap
from django_auth_ldap.config import LDAPSearch, LDAPGroupQuery, \
    ActiveDirectoryGroupType

### Common ####################################################################
AD_CERT_PATH = '{{ certs_home }}/{{ ldap_CA_cert }}'

# pylint: disable=no-member
AUTH_LDAP_USER_SEARCH = LDAPSearch('{{ ldap_user_search_dn }}',
                                   ldap.SCOPE_SUBTREE,
                                   '(userPrincipalName=%(user)s)')
AUTH_LDAP_USER_ATTR_MAP = {
{% for key, val in ldap_user_attr_map.items() %}
    '{{ key }}': '{{ val }}',
{% endfor %}
}
AUTH_LDAP_ALWAYS_UPDATE_USER = True
AUTH_LDAP_DENY_GROUP = '{{ ldap_deny_group_dn }}'

AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    'is_active': (
        LDAPGroupQuery('{{ ldap_superusers_group_dn }}')
        | LDAPGroupQuery('{{ ldap_managers_group_dn }}')
    ),
    'is_staff': (
        LDAPGroupQuery('{{ ldap_superusers_group_dn }}')
        | LDAPGroupQuery('{{ ldap_managers_group_dn }}')
    ),
    'is_superuser': '{{ ldap_superusers_group_dn }}',
}

AUTH_LDAP_GROUP_SEARCH = LDAPSearch('{{ ldap_priceplan_dn }}',
                                    ldap.SCOPE_SUBTREE,
                                    '(objectClass=group)')
AUTH_LDAP_GROUP_TYPE = ActiveDirectoryGroupType(name_attr='{{ ldap_group_name_attr }}')
AUTH_LDAP_FIND_GROUP_PERMS = True

### ONE #######################################################################
AUTH_LDAP_1_SERVER_URI = '{{ ldap_server_uri_1 }}'
AUTH_LDAP_1_BIND_DN = '{{ ldap_bind_dn_1 }}'
AUTH_LDAP_1_BIND_PASSWORD = '{{ ldap_bind_password_1 }}'
AUTH_LDAP_1_CONNECTION_OPTIONS = {
    ldap.OPT_REFERRALS: 0,
    ldap.OPT_X_TLS_CACERTFILE: AD_CERT_PATH,
    ldap.OPT_X_TLS_NEWCTX: 0,
}

### TWO #######################################################################
AUTH_LDAP_2_SERVER_URI = '{{ ldap_server_uri_2 }}'
AUTH_LDAP_2_BIND_DN = '{{ ldap_bind_dn_2 }}'
AUTH_LDAP_2_BIND_PASSWORD = '{{ ldap_bind_password_2 }}'
AUTH_LDAP_2_CONNECTION_OPTIONS = {
    ldap.OPT_REFERRALS: 0,
    ldap.OPT_X_TLS_CACERTFILE: AD_CERT_PATH,
    ldap.OPT_X_TLS_NEWCTX: 0,
}

### Dummy #####################################################################
AUTH_LDAP_1_USER_SEARCH = AUTH_LDAP_2_USER_SEARCH = AUTH_LDAP_USER_SEARCH
AUTH_LDAP_1_USER_ATTR_MAP = AUTH_LDAP_2_USER_ATTR_MAP = AUTH_LDAP_USER_ATTR_MAP
AUTH_LDAP_1_ALWAYS_UPDATE_USER = \
    AUTH_LDAP_2_ALWAYS_UPDATE_USER = \
    AUTH_LDAP_ALWAYS_UPDATE_USER
# AUTH_LDAP_1_REQUIRE_GROUP = AUTH_LDAP_2_REQUIRE_GROUP = AUTH_LDAP_REQUIRE_GROUP
AUTH_LDAP_1_DENY_GROUP = AUTH_LDAP_2_DENY_GROUP = AUTH_LDAP_DENY_GROUP
AUTH_LDAP_1_USER_FLAGS_BY_GROUP = \
    AUTH_LDAP_2_USER_FLAGS_BY_GROUP = \
    AUTH_LDAP_USER_FLAGS_BY_GROUP
AUTH_LDAP_1_GROUP_SEARCH = AUTH_LDAP_2_GROUP_SEARCH = AUTH_LDAP_GROUP_SEARCH
AUTH_LDAP_1_GROUP_TYPE = AUTH_LDAP_2_GROUP_TYPE = AUTH_LDAP_GROUP_TYPE
AUTH_LDAP_1_FIND_GROUP_PERMS = \
    AUTH_LDAP_2_FIND_GROUP_PERMS = \
    AUTH_LDAP_FIND_GROUP_PERMS

AUTHENTICATION_BACKENDS = [
    'priceplan.settings.ldap_backends.LDAPBackendOne',
    'priceplan.settings.ldap_backends.LDAPBackendTwo',
    'django.contrib.auth.backends.ModelBackend'
]
{% endif %}
